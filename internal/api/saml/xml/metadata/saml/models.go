// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for urn:oasis:names:tc:SAML:2.0:assertion
package saml

import (
	"encoding/xml"
	"github.com/caos/zitadel/internal/api/saml/xml/metadata/xenc"
	"github.com/caos/zitadel/internal/api/saml/xml/metadata/xml_dsig"
)

// Element
type BaseID struct {
	XMLName xml.Name `xml:"BaseID"`
}

// Element
type NameID struct {
	XMLName xml.Name `xml:"NameID"`

	Format string `xml:"Format,attr,omitempty"`

	SPProvidedID string `xml:"SPProvidedID,attr,omitempty"`

	NameQualifier string `xml:"NameQualifier,attr,omitempty"`

	SPNameQualifier string `xml:"SPNameQualifier,attr,omitempty"`

	Text string `xml:",chardata"`
}

// Element
type EncryptedID struct {
	XMLName xml.Name `xml:"EncryptedID"`

	EncryptedData xenc.EncryptedDataType `xml:"EncryptedData"`

	EncryptedKey []xenc.EncryptedKeyType `xml:"EncryptedKey"`
}

// Element
type Issuer struct {
	XMLName xml.Name `xml:"Issuer"`

	Format string `xml:"Format,attr,omitempty"`

	SPProvidedID string `xml:"SPProvidedID,attr,omitempty"`

	NameQualifier string `xml:"NameQualifier,attr,omitempty"`

	SPNameQualifier string `xml:"SPNameQualifier,attr,omitempty"`

	Text string `xml:",chardata"`
}

// Element
type AssertionIDRef struct {
	XMLName xml.Name `xml:"AssertionIDRef"`

	Text string `xml:",chardata"`
}

// Element
type AssertionURIRef struct {
	XMLName xml.Name `xml:"AssertionURIRef"`

	Text string `xml:",chardata"`
}

// Element
type Assertion struct {
	XMLName xml.Name `xml:"Assertion"`

	Version string `xml:"Version,attr"`

	Id string `xml:"ID,attr"`

	IssueInstant string `xml:"IssueInstant,attr"`

	Issuer NameIDType `xml:"Issuer"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Subject *SubjectType `xml:"Subject"`

	Conditions *ConditionsType `xml:"Conditions"`

	Advice *AdviceType `xml:"Advice"`

	Statement []StatementAbstractType `xml:"Statement"`

	AuthnStatement []AuthnStatementType `xml:"AuthnStatement"`

	AuthzDecisionStatement []AuthzDecisionStatementType `xml:"AuthzDecisionStatement"`

	AttributeStatement []AttributeStatementType `xml:"AttributeStatement"`
}

// Element
type Subject struct {
	XMLName xml.Name `xml:"Subject"`

	SubjectConfirmation []SubjectConfirmationType `xml:"SubjectConfirmation"`

	BaseID *BaseIDAbstractType `xml:"BaseID"`

	NameID *NameIDType `xml:"NameID"`

	EncryptedID *EncryptedElementType `xml:"EncryptedID"`
}

// Element
type SubjectConfirmation struct {
	XMLName xml.Name `xml:"SubjectConfirmation"`

	Method string `xml:"Method,attr"`

	SubjectConfirmationData *SubjectConfirmationDataType `xml:"SubjectConfirmationData"`

	BaseID *BaseIDAbstractType `xml:"BaseID"`

	NameID *NameIDType `xml:"NameID"`

	EncryptedID *EncryptedElementType `xml:"EncryptedID"`
}

// Element
type SubjectConfirmationData struct {
	XMLName xml.Name `xml:"SubjectConfirmationData"`

	NotBefore string `xml:"NotBefore,attr,omitempty"`

	NotOnOrAfter string `xml:"NotOnOrAfter,attr,omitempty"`

	Recipient string `xml:"Recipient,attr,omitempty"`

	InResponseTo string `xml:"InResponseTo,attr,omitempty"`

	Address string `xml:"Address,attr,omitempty"`
}

// Element
type Conditions struct {
	XMLName xml.Name `xml:"Conditions"`

	NotBefore string `xml:"NotBefore,attr,omitempty"`

	NotOnOrAfter string `xml:"NotOnOrAfter,attr,omitempty"`

	Condition []ConditionAbstractType `xml:"Condition"`

	AudienceRestriction []AudienceRestrictionType `xml:"AudienceRestriction"`

	OneTimeUse []OneTimeUseType `xml:"OneTimeUse"`

	ProxyRestriction []ProxyRestrictionType `xml:"ProxyRestriction"`
}

// Element
type Condition struct {
	XMLName xml.Name `xml:"Condition"`
}

// Element
type AudienceRestriction struct {
	XMLName xml.Name `xml:"AudienceRestriction"`

	Audience []string `xml:",any"`
}

// Element
type Audience struct {
	XMLName xml.Name `xml:"Audience"`

	Text string `xml:",chardata"`
}

// Element
type OneTimeUse struct {
	XMLName xml.Name `xml:"OneTimeUse"`
}

// Element
type ProxyRestriction struct {
	XMLName xml.Name `xml:"ProxyRestriction"`

	Count int `xml:"Count,attr,omitempty"`

	Audience []string `xml:",any"`
}

// Element
type Advice struct {
	XMLName xml.Name `xml:"Advice"`

	AssertionIDRef []string `xml:"AssertionIDRef"`

	AssertionURIRef []string `xml:"AssertionURIRef"`

	Assertion []AssertionType `xml:"Assertion"`

	EncryptedAssertion []EncryptedElementType `xml:"EncryptedAssertion"`
}

// Element
type EncryptedAssertion struct {
	XMLName xml.Name `xml:"EncryptedAssertion"`

	EncryptedData xenc.EncryptedDataType `xml:"EncryptedData"`

	EncryptedKey []xenc.EncryptedKeyType `xml:"EncryptedKey"`
}

// Element
type Statement struct {
	XMLName xml.Name `xml:"Statement"`
}

// Element
type AuthnStatement struct {
	XMLName xml.Name `xml:"AuthnStatement"`

	AuthnInstant string `xml:"AuthnInstant,attr"`

	SessionIndex string `xml:"SessionIndex,attr,omitempty"`

	SessionNotOnOrAfter string `xml:"SessionNotOnOrAfter,attr,omitempty"`

	SubjectLocality *SubjectLocalityType `xml:"SubjectLocality"`

	AuthnContext AuthnContextType `xml:"AuthnContext"`
}

// Element
type SubjectLocality struct {
	XMLName xml.Name `xml:"SubjectLocality"`

	Address string `xml:"Address,attr,omitempty"`

	DNSName string `xml:"DNSName,attr,omitempty"`
}

// Element
type AuthnContext struct {
	XMLName xml.Name `xml:"AuthnContext"`

	AuthenticatingAuthority []string `xml:"AuthenticatingAuthority"`

	AuthnContextClassRef string `xml:"AuthnContextClassRef"`

	AuthnContextDecl string `xml:"AuthnContextDecl"`

	AuthnContextDeclRef string `xml:"AuthnContextDeclRef"`
}

// Element
type AuthnContextClassRef struct {
	XMLName xml.Name `xml:"AuthnContextClassRef"`

	Text string `xml:",chardata"`
}

// Element
type AuthnContextDeclRef struct {
	XMLName xml.Name `xml:"AuthnContextDeclRef"`

	Text string `xml:",chardata"`
}

// Element
type AuthnContextDecl struct {
	XMLName xml.Name `xml:"AuthnContextDecl"`

	Text string `xml:",chardata"`
}

// Element
type AuthenticatingAuthority struct {
	XMLName xml.Name `xml:"AuthenticatingAuthority"`

	Text string `xml:",chardata"`
}

// Element
type AuthzDecisionStatement struct {
	XMLName xml.Name `xml:"AuthzDecisionStatement"`

	Resource string `xml:"Resource,attr"`

	Decision DecisionType `xml:"Decision,attr"`

	Action []ActionType `xml:"Action"`

	Evidence *EvidenceType `xml:"Evidence"`
}

// Element
type Action struct {
	XMLName xml.Name `xml:"Action"`

	Namespace string `xml:"Namespace,attr"`

	Text string `xml:",chardata"`
}

// Element
type Evidence struct {
	XMLName xml.Name `xml:"Evidence"`

	AssertionIDRef []string `xml:"AssertionIDRef"`

	AssertionURIRef []string `xml:"AssertionURIRef"`

	Assertion []AssertionType `xml:"Assertion"`

	EncryptedAssertion []EncryptedElementType `xml:"EncryptedAssertion"`
}

// Element
type AttributeStatement struct {
	XMLName xml.Name `xml:"AttributeStatement"`
}

// Element
type Attribute struct {
	XMLName xml.Name `xml:"Attribute"`

	Name string `xml:"Name,attr"`

	NameFormat string `xml:"NameFormat,attr,omitempty"`

	FriendlyName string `xml:"FriendlyName,attr,omitempty"`

	AttributeValue []string `xml:",any"`
}

// Element
type AttributeValue struct {
	XMLName xml.Name `xml:"AttributeValue"`

	Text string `xml:",chardata"`
}

// Element
type EncryptedAttribute struct {
	XMLName xml.Name `xml:"EncryptedAttribute"`

	EncryptedData xenc.EncryptedDataType `xml:"EncryptedData"`

	EncryptedKey []xenc.EncryptedKeyType `xml:"EncryptedKey"`
}

// XSD ComplexType declarations

type BaseIDAbstractType struct {
	XMLName xml.Name

	InnerXml string `xml:",innerxml"`
}

type NameIDType struct {
	XMLName xml.Name

	Format string `xml:"Format,attr,omitempty"`

	SPProvidedID string `xml:"SPProvidedID,attr,omitempty"`

	NameQualifier string `xml:"NameQualifier,attr,omitempty"`

	SPNameQualifier string `xml:"SPNameQualifier,attr,omitempty"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

type EncryptedElementType struct {
	XMLName xml.Name

	EncryptedData xenc.EncryptedDataType `xml:"EncryptedData"`

	EncryptedKey []xenc.EncryptedKeyType `xml:"EncryptedKey"`

	InnerXml string `xml:",innerxml"`
}

type AssertionType struct {
	XMLName xml.Name

	Version string `xml:"Version,attr"`

	Id string `xml:"ID,attr"`

	IssueInstant string `xml:"IssueInstant,attr"`

	Issuer NameIDType `xml:"Issuer"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Subject *SubjectType `xml:"Subject"`

	Conditions *ConditionsType `xml:"Conditions"`

	Advice *AdviceType `xml:"Advice"`

	Statement []StatementAbstractType `xml:"Statement"`

	AuthnStatement []AuthnStatementType `xml:"AuthnStatement"`

	AuthzDecisionStatement []AuthzDecisionStatementType `xml:"AuthzDecisionStatement"`

	AttributeStatement []AttributeStatementType `xml:"AttributeStatement"`

	InnerXml string `xml:",innerxml"`
}

type SubjectType struct {
	XMLName xml.Name

	SubjectConfirmation []SubjectConfirmationType `xml:"SubjectConfirmation"`

	BaseID *BaseIDAbstractType `xml:"BaseID"`

	NameID *NameIDType `xml:"NameID"`

	EncryptedID *EncryptedElementType `xml:"EncryptedID"`

	InnerXml string `xml:",innerxml"`
}

type SubjectConfirmationType struct {
	XMLName xml.Name

	Method string `xml:"Method,attr"`

	SubjectConfirmationData *SubjectConfirmationDataType `xml:"SubjectConfirmationData"`

	BaseID *BaseIDAbstractType `xml:"BaseID"`

	NameID *NameIDType `xml:"NameID"`

	EncryptedID *EncryptedElementType `xml:"EncryptedID"`

	InnerXml string `xml:",innerxml"`
}

type SubjectConfirmationDataType struct {
	XMLName xml.Name

	NotBefore string `xml:"NotBefore,attr,omitempty"`

	NotOnOrAfter string `xml:"NotOnOrAfter,attr,omitempty"`

	Recipient string `xml:"Recipient,attr,omitempty"`

	InResponseTo string `xml:"InResponseTo,attr,omitempty"`

	Address string `xml:"Address,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type KeyInfoConfirmationDataType struct {
	XMLName xml.Name

	NotBefore string `xml:"NotBefore,attr,omitempty"`

	NotOnOrAfter string `xml:"NotOnOrAfter,attr,omitempty"`

	Recipient string `xml:"Recipient,attr,omitempty"`

	InResponseTo string `xml:"InResponseTo,attr,omitempty"`

	Address string `xml:"Address,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type ConditionsType struct {
	XMLName xml.Name

	NotBefore string `xml:"NotBefore,attr,omitempty"`

	NotOnOrAfter string `xml:"NotOnOrAfter,attr,omitempty"`

	Condition []ConditionAbstractType `xml:"Condition"`

	AudienceRestriction []AudienceRestrictionType `xml:"AudienceRestriction"`

	OneTimeUse []OneTimeUseType `xml:"OneTimeUse"`

	ProxyRestriction []ProxyRestrictionType `xml:"ProxyRestriction"`

	InnerXml string `xml:",innerxml"`
}

type ConditionAbstractType struct {
	XMLName xml.Name

	InnerXml string `xml:",innerxml"`
}

type AudienceRestrictionType struct {
	XMLName xml.Name

	Audience []string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type OneTimeUseType struct {
	XMLName xml.Name

	InnerXml string `xml:",innerxml"`
}

type ProxyRestrictionType struct {
	XMLName xml.Name

	Count int `xml:"Count,attr,omitempty"`

	Audience []string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type AdviceType struct {
	XMLName xml.Name

	AssertionIDRef []string `xml:"AssertionIDRef"`

	AssertionURIRef []string `xml:"AssertionURIRef"`

	Assertion []AssertionType `xml:"Assertion"`

	EncryptedAssertion []EncryptedElementType `xml:"EncryptedAssertion"`

	InnerXml string `xml:",innerxml"`
}

type StatementAbstractType struct {
	XMLName xml.Name

	InnerXml string `xml:",innerxml"`
}

type AuthnStatementType struct {
	XMLName xml.Name

	AuthnInstant string `xml:"AuthnInstant,attr"`

	SessionIndex string `xml:"SessionIndex,attr,omitempty"`

	SessionNotOnOrAfter string `xml:"SessionNotOnOrAfter,attr,omitempty"`

	SubjectLocality *SubjectLocalityType `xml:"SubjectLocality"`

	AuthnContext AuthnContextType `xml:"AuthnContext"`

	InnerXml string `xml:",innerxml"`
}

type SubjectLocalityType struct {
	XMLName xml.Name

	Address string `xml:"Address,attr,omitempty"`

	DNSName string `xml:"DNSName,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type AuthnContextType struct {
	XMLName xml.Name

	AuthenticatingAuthority []string `xml:"AuthenticatingAuthority"`

	AuthnContextClassRef string `xml:"AuthnContextClassRef"`

	AuthnContextDecl string `xml:"AuthnContextDecl"`

	AuthnContextDeclRef string `xml:"AuthnContextDeclRef"`

	InnerXml string `xml:",innerxml"`
}

type AuthzDecisionStatementType struct {
	XMLName xml.Name

	Resource string `xml:"Resource,attr"`

	Decision DecisionType `xml:"Decision,attr"`

	Action []ActionType `xml:"Action"`

	Evidence *EvidenceType `xml:"Evidence"`

	InnerXml string `xml:",innerxml"`
}

type ActionType struct {
	XMLName xml.Name

	Namespace string `xml:"Namespace,attr"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

type EvidenceType struct {
	XMLName xml.Name

	AssertionIDRef []string `xml:"AssertionIDRef"`

	AssertionURIRef []string `xml:"AssertionURIRef"`

	Assertion []AssertionType `xml:"Assertion"`

	EncryptedAssertion []EncryptedElementType `xml:"EncryptedAssertion"`

	InnerXml string `xml:",innerxml"`
}

type AttributeStatementType struct {
	XMLName xml.Name

	InnerXml string `xml:",innerxml"`
}

type AttributeType struct {
	XMLName xml.Name

	Name string `xml:"Name,attr"`

	NameFormat string `xml:"NameFormat,attr,omitempty"`

	FriendlyName string `xml:"FriendlyName,attr,omitempty"`

	AttributeValue []string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

// XSD SimpleType declarations

type DecisionType string

const DecisionTypePermit DecisionType = "Permit"

const DecisionTypeDeny DecisionType = "Deny"

const DecisionTypeIndeterminate DecisionType = "Indeterminate"
