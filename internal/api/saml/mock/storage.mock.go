// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/caos/zitadel/internal/api/saml (interfaces: Storage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	key "github.com/caos/zitadel/internal/api/saml/key"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetCA mocks base method
func (m *MockStorage) GetCA(arg0 context.Context, arg1 chan<- key.CertificateAndKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetCA", arg0, arg1)
}

// GetCA indicates an expected call of GetCA
func (mr *MockStorageMockRecorder) GetCA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCA", reflect.TypeOf((*MockStorage)(nil).GetCA), arg0, arg1)
}

// GetMetadataSigningKey mocks base method
func (m *MockStorage) GetMetadataSigningKey(arg0 context.Context, arg1 chan<- key.CertificateAndKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetMetadataSigningKey", arg0, arg1)
}

// GetMetadataSigningKey indicates an expected call of GetMetadataSigningKey
func (mr *MockStorageMockRecorder) GetMetadataSigningKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataSigningKey", reflect.TypeOf((*MockStorage)(nil).GetMetadataSigningKey), arg0, arg1)
}

// Health mocks base method
func (m *MockStorage) Health(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health
func (mr *MockStorageMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockStorage)(nil).Health), arg0)
}
